from test import assert, assert_eq

locals = {}

foo = |x|
  result =
    x: x
  result + locals.foo_meta

# The overloaded operators are implemented after foo has been declared
locals.foo_meta =
  # Arithmetic operators
  @add: |self, other| foo self.x + other.x
  @subtract: |self, other| foo self.x - other.x
  @multiply: |self, other| foo self.x * other.x
  @divide: |self, other| foo self.x / other.x
  @modulo: |self, other| foo self.x % other.x

  #Comparison operators
  @less: |self, other| self.x < other.x
  @less_or_equal: |self, other| self.x <= other.x
  @greater: |self, other| self.x > other.x
  @greater_or_equal: |self, other| self.x >= other.x
  @equal: |self, other| self.x == other.x
  @not_equal: |self, other| not self == other


export tests =
  test_add: ||
    assert_eq (foo(10) + foo(20)), foo 30

  test_subtract: ||
    assert_eq (foo(99) - foo(100)), foo -1

  test_multiply: ||
    assert_eq (foo(6) * foo(7)), foo 42

  test_divide: ||
    assert_eq (foo(42) / foo(2)), foo 21

  test_modulo: ||
    assert_eq (foo(42) % foo(10)), foo 2

  test_less: ||
    assert foo(5) < foo(6)
    assert not (foo(5) < foo(5))

  test_less_or_equal: ||
    assert foo(5) <= foo(6)
    assert foo(5) <= foo(5)

  test_greater: ||
    assert foo(40) > foo(30)
    assert not (foo(40) > foo(40))

  test_greater_or_equal: ||
    assert foo(40) >= foo(30)
    assert foo(40) >= foo(40)

  test_equal: ||
    assert foo(21) == foo(21)
    assert not (foo(21) == foo(22))
    # TODO Add an assert_eq test

  test_not_equal: ||
    assert foo(7) != foo(8)
    assert not (foo(7) != foo(7))
    # TODO Add an assert_ne test
